Ваш класс UserService содержит методы для регистрации пользователей, аутентификации, получения активного пользователя и установки роли для администраторов. Чтобы добавить проверку администраторских прав, вы можете использовать следующий подход:

Проверка аутентификации администратора: В методах, которые предназначены для администраторов (например, getUserByEmail, getUserById, getAllUsers, setUserRole), добавьте проверку, что текущий пользователь является администратором. Например:
Java

public User getUserByEmail(String email) {
    if (isAdmin()) {
        return userRepository.getUserByEmail(email);
    }
    return null;
}
AI-generated code. Review and use carefully. More info on FAQ.Здесь isAdmin() - это метод, который проверяет, является ли текущий пользователь администратором.
Реализация метода isAdmin(): В вашем классе UserService добавьте метод, который будет определять, является ли текущий пользователь администратором. Например:
Java

private boolean isAdmin() {
    // Здесь вам нужно определить, что текущий пользователь - администратор.
    // Например, проверить его роль или другие атрибуты.
    // Верните true, если пользователь - администратор, и false в противном случае.
    // Примерно так:
    return activeUser != null && activeUser.getRole() == Role.ADMIN;
}
AI-generated code. Review and use carefully. More info on FAQ.
Обработка аутентификации администратора: При аутентификации пользователя в методе authenticate, вы можете установить флаг, что пользователь является администратором, если его роль соответствует администратору:
Java

public boolean authenticate(String email, String password) {
    User user = userRepository.getUserByEmail(email);
    if (user != null && user.getPassword().equals(password)) {
        this.activeUser = user;
        // Установите флаг администратора, если пользователь - администратор
        if (user.getRole() == Role.ADMIN) {
            // Дополнительные действия для администратора
        }
        return true;
    }
    return false;
}
AI-generated code. Review and use carefully. More info on FAQ.Здесь Role.ADMIN - это предполагаемая роль администратора.
Обработка аутентификации неудачи: Если аутентификация не удалась, вы можете вернуть false и не устанавливать активного пользователя:
Java

public boolean authenticate(String email, String password) {
    User user = userRepository.getUserByEmail(email);
    if (user != null && user.getPassword().equals(password)) {
        this.activeUser = user;
        if (user.getRole() == Role.ADMIN) {
            // Дополнительные действия для администратора
        }
        return true;
    } else {
        return false;
    }
}
AI-generated code. Review and use carefully. More info on FAQ.
Это общий подход, и вы можете настроить его под свои требования. Не забудьте также обрабатывать случаи, когда пользователь не аутентифицирован или не имеет администраторских прав.